==========================================
search in MATCHING-LOGIC-TABLEAUX : tableaux(\nu X . \and(< next (X{0}) >, \or(a, b))) =>* Sequent:Sequent .

Solution 1 (state 0)
Sequent:Sequent --> < < next (v(0){0}) >, \or(a, b) ; v(0) := \nu * . \and(< next (*{0}) >, \or(a, b)) >

Solution 2 (state 1)
Sequent:Sequent --> < a, < next (v(0){0}) > ; v(0) := \nu * . \and(< next (*{0}) >, \or(a, b)) >

Solution 3 (state 2)
Sequent:Sequent --> < b, < next (v(0){0}) > ; v(0) := \nu * . \and(< next (*{0}) >, \or(a, b)) >

No more solutions.
state 0, Sequent: < < next (v(0){0}) >, \or(a, b) ; v(0) := \nu * . \and(< next (*{0}) >, \or(a, b)) >
arc 0 ===> state 1 (crl < Gamma, \or(P1, P2) ; DefList > => [P1, Gamma ; DefList] if P1 =/= \bottom = true /\ P2 =/= \bottom = true [label or-l] .) (crl < Gamma, \or(P1, P2) ; DefList > => [P2, Gamma ; DefList] if P1 =/= \bottom = true /\ P2 =/= \bottom = true [label or-r] .)
arc 1 ===> state 2 (crl < Gamma, \or(P1, P2) ; DefList > => [P1, Gamma ; DefList] if P1 =/= \bottom = true /\ P2 =/= \bottom = true [label or-l] .) (crl < Gamma, \or(P1, P2) ; DefList > => [P2, Gamma ; DefList] if P1 =/= \bottom = true /\ P2 =/= \bottom = true [label or-r] .)

state 1, Sequent: < a, < next (v(0){0}) > ; v(0) := \nu * . \and(< next (*{0}) >, \or(a, b)) >
arc 0 ===> state 0 (crl < Gamma, < Sy P > ; DefList > => [P, getBetas(Sy ; Gamma) ; DefList] if isReduced(Gamma ; DefList) = true [label all<>] .)

state 2, Sequent: < b, < next (v(0){0}) > ; v(0) := \nu * . \and(< next (*{0}) >, \or(a, b)) >
arc 0 ===> state 0 (crl < Gamma, < Sy P > ; DefList > => [P, getBetas(Sy ; Gamma) ; DefList] if isReduced(Gamma ; DefList) = true [label all<>] .)
Bye.
