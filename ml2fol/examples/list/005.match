(declare-sort Nat)
(declare-sort NatSeq)
(declare-sort Map)

; Natural numbers

(declare-func zero () Nat)
(declare-func succ (Nat) Nat)

(declare-func one        () Nat)
(declare-func two        () Nat)
(declare-func three      () Nat)
(declare-func four       () Nat)
(declare-func five       () Nat)
(declare-func six        () Nat)
(declare-func seven      () Nat)
(declare-func eight      () Nat)
(declare-func nine       () Nat)
(declare-func ten        () Nat)
(declare-func eleven     () Nat) 
(declare-func twelve     () Nat) 
(declare-func thirteen   () Nat) 
(declare-func fourteen   () Nat) 
(declare-func fifteen  () Nat) 
(declare-func sixteen    () Nat) 
(declare-func seventeen  () Nat) 
(declare-func eighteen   () Nat) 
(declare-func nineteen   () Nat) 
(declare-func twenty     () Nat) 

(assert (= one        (succ zero     ))) 
(assert (= two        (succ one      ))) 
(assert (= three      (succ two      ))) 
(assert (= four       (succ three    ))) 
(assert (= five       (succ four     ))) 
(assert (= six        (succ five     ))) 
(assert (= seven      (succ six      ))) 
(assert (= eight      (succ seven    ))) 
(assert (= nine       (succ eight    ))) 
(assert (= ten        (succ nine     ))) 
(assert (= eleven     (succ ten      ))) 
(assert (= twelve     (succ eleven   ))) 
(assert (= thirteen   (succ twelve   ))) 
(assert (= fourteen   (succ thirteen ))) 
(assert (= fifteen  (succ fourteen ))) 
(assert (= sixteen    (succ fifteen))) 
(assert (= seventeen  (succ sixteen  ))) 
(assert (= eighteen   (succ seventeen))) 
(assert (= nineteen   (succ eighteen ))) 
(assert (= twenty     (succ nineteen ))) 



; succ is injective
(assert (forall ((x Nat) (y Nat))
  (= (= (succ x) (succ y))
     (= x y))))

; succ(x) =/= x
(assert (forall ((x Nat))
  (not (= (succ x) x))))

; Sequence of naturals

(declare-func epsilon () IntSeq)
(declare-func cons (Int IntSeq) IntSeq)
(declare-func append (IntSeq IntSeq) IntSeq)

(assert (forall ((x Int) (s IntSeq))
  (not (= (cons x s) s))))

(assert (forall ((x1 Int) (x2 Int) (s1 IntSeq) (s2 IntSeq))
  (= (= (cons x1 s1) (cons x2 s2))
     (and (= x1 x2) (= s1 s2)))))

(assert (forall ((s1 IntSeq) (s2 IntSeq) (s3 IntSeq))
  (= (append (append s1 s2) s3)
     (append s1 (append s2 s3)))))

(assert (forall ((s IntSeq))
  (= (append s epsilon) s)))

(assert (forall ((s IntSeq))
  (= (append epsilon s) s)))

(assert (forall ((s1 IntSeq) (s2 IntSeq) (x Int))
  (= (append (cons x s1) s2)
     (cons x (append s1 s2)))))

(declare-func rev (IntSeq) IntSeq)

(assert (= (rev epsilon) epsilon))

(assert (forall ((x Int) (s IntSeq))
  (= (rev (cons x s))
     (append (rev s) (cons x epsilon)))))

; Maps

(declare-func emp () Map)

; x |-> y
(declare-part mapsto (Int Int) Map)

; 0 |-> y is bottom
(assert (forall ((y Int))
  (not (mapsto zero y))))

; succ(x) |-> y is defined 
(assert (forall ((x Int) (y Int))
  (ceil (mapsto (succ x) y))))

; succ(x1) |-> y1 = succ(x2) |-> y2 iff x1 = x2 /\ y1 = y1
(assert (forall ((x1 Int) (x2 Int) (y1 Int) (y2 Int))
  (= (= (mapsto (succ x1) y1) (mapsto (succ x2) y2))
     (and (= x1 x2) (= y1 y2)))))

; merge is a partial AC binary function
(declare-part merge (Map Map) Map)

; commutativity
(assert (forall ((h1 Map) (h2 Map))
  (= (merge h1 h2) (merge h2 h1))))

; associativity
(assert (forall ((h1 Map) (h2 Map) (h3 Map))
  (= (merge (merge h1 h2) h3)
     (merge h1 (merge h2 h3)))))
; identity
(assert (forall ((h Map))
  (= h (merge h emp))))

; x |-> y * x |-> z = bottom
(assert (forall ((x Int) (y Int) (z Int))
  (not (merge (mapsto x y) (mapsto x z)))))

; mapstoseq
(declare-part mapstoseq (Int IntSeq) Map)

(assert (forall ((x Int))
  (= (mapstoseq x epsilon) emp)))

(assert (forall ((x Int) (y Int) (s IntSeq))
  (= (mapstoseq x (cons y s))
     (merge (mapsto x y) (mapstoseq (succ x) s)))))

(declare-symb list (Int IntSeq) Map)

(assert (forall ((x Int))
  (= (list x epsilon)
     (and emp (= x zero)))))

(assert (forall ((x Int) (y Int) (s IntSeq))
  (= (list x (cons y s))
     (exists ((z Int))
       (merge (mapstoseq x (cons y (cons z epsilon)))
              (list z s))))))
              
;list(5, [13;17;9;2;5;13])

; 5 -> 13   *
; 6 -> 2    *
; 2 -> 17   *
; 3 -> 11
; 11 -> 9 
; 12 -> 17
; 17 -> 2   *
; 18 -> 14  *
; 14 -> 5   *
; 15 -> 19  *
; 19 -> 13  *
; 20 -> 0   *
              
(assert (not (floor
  (contains (list five (cons thirteen
                       (cons seventeen
                       (cons nine
                       (cons two
                       (cons five
                       (cons thirteen epsilon)))))))
            (merge (merge (merge (mapsto seventeen two)
                          (merge (mapsto nineteen thirteen)
                                 (mapsto six two)))
                          (merge (mapsto eighteen fourteen)
                                 (mapsto twenty zero)))
                   (merge (mapsto five thirteen)
                   (merge (mapsto fourteen five)
                   (merge (merge (mapsto fifteen nineteen)
                                 (mapsto two seventeen))
                          (merge (mapsto three eleven)
                          (merge (mapsto eleven nine)
                                 (mapsto twelve seventeen)))))))))))
          
          
