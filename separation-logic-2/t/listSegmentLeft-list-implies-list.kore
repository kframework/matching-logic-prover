imports "t/definitions/list.kore"
imports "t/definitions/listSegmentLeft.kore"


claim \implies( \and( listSegmentLeft( H { ArrayIntInt } , X { Int } , Y { Int } , F { SetInt } )
                    , list( H { ArrayIntInt }, Y { Int }, G { SetInt })
                    , \equals( K { SetInt }, union(F { SetInt }, G { SetInt }))
                    , disjoint(F { SetInt }, G { SetInt })
                     )
              , \and( list( H { ArrayIntInt }, X { Int }, K { SetInt }) )
              )

/*
Sketch of kt strategy for this proof (only considering recursive case)

lseg(x,y) * list(y) -> list(x)

C[lseg(x, y)] -> list(x) -- defining C == hole * list(y)

lseg(x,y) -> \exists h. h /\ h * list(y) -> list(x) -- by kt-wrap

(x > 0 and lseg(n(x), y))[RHS/lseg][n(x)/x] -> (\exists h. h /\ h * list(y) -> list(x)) -- by lfp

(x > 0 and \exists h. h /\ h * list(y) -> list(n(x))) -> (\exists h. h /\ h * list(y) -> list(x)) -- by applying above substitution

((x > 0 and \exists h. h /\ h * list(y) -> list(n(x))) * list(y)) -> list(x) -- by kt-unwrap

(x > 0 and list(n(x)) * list(y)) -> list(x) -- by kt-collapse
*/

strategy kt . normalize
            . ( ( simplify
                . left-unfold-Nth(0) .
                  ( ( right-unfold-Nth(0, 0) . smt)
                  | ( right-unfold-Nth(0, 1) . smt)
                  )
                )
              )

// strategy search-bound(4)
