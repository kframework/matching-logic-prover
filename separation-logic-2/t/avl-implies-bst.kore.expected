<prover>
  <k>
    .
  </k>
  <exit-code>
    0
  </exit-code>
  <goals>
    <goal>
      active: true, id: root, parent: .
      <claim>
        \implies ( \and ( avl ( H { ArrayIntInt } , X { Int } , F { SetInt } , MIN { Int } , MAX { Int } , Height { Int } , Balance { Int } , .Patterns ) , .Patterns ) , \exists { .Patterns } \and ( bst ( H { ArrayIntInt } , X { Int } , F { SetInt } , MIN { Int } , MAX { Int } , .Patterns ) , .Patterns ) )
      </claim>
      <strategy>
        success
      </strategy>
      <expected>
        success
      </expected>
    <trace>
      .
    </trace>
  </goals>
  <declarations>
    <declaration>
      axiom \forall { H { ArrayIntInt } , X { Int } , F { SetInt } , MIN { Int } , MAX { Int } , .Patterns } \iff-lfp ( bst ( H { ArrayIntInt } , X { Int } , F { SetInt } , MIN { Int } , MAX { Int } , .Patterns ) , \or ( \exists { .Patterns } \and ( \equals ( X { Int } , 0 ) , \equals ( F { SetInt } , emptyset ) , .Patterns ) , \exists { .Patterns } \and ( gt ( X { Int } , 0 , .Patterns ) , \equals ( select ( H { ArrayIntInt } , plus ( X { Int } , 1 , .Patterns ) , .Patterns ) , 0 ) , \equals ( select ( H { ArrayIntInt } , plus ( X { Int } , 2 , .Patterns ) , .Patterns ) , 0 ) , \equals ( MIN { Int } , X { Int } ) , \equals ( MAX { Int } , X { Int } ) , \equals ( F { SetInt } , singleton ( X { Int } , .Patterns ) ) , .Patterns ) , \exists { F_J1 { SetInt } , F_J2 { SetInt } , MAX_L1 { Int } , MAX_L2 { Int } , MIN_K1 { Int } , MIN_K2 { Int } , X_I1 { Int } , X_I2 { Int } , .Patterns } \and ( bst ( H { ArrayIntInt } , X_I1 { Int } , F_J1 { SetInt } , MIN_K1 { Int } , MAX_L1 { Int } , .Patterns ) , bst ( H { ArrayIntInt } , X_I2 { Int } , F_J2 { SetInt } , MIN_K2 { Int } , MAX_L2 { Int } , .Patterns ) , gt ( X { Int } , 0 , .Patterns ) , \equals ( select ( H { ArrayIntInt } , plus ( X { Int } , 1 , .Patterns ) , .Patterns ) , X_I1 { Int } ) , \equals ( select ( H { ArrayIntInt } , plus ( X { Int } , 2 , .Patterns ) , .Patterns ) , X_I2 { Int } ) , gt ( X { Int } , MAX_L1 { Int } , .Patterns ) , gt ( MIN_K2 { Int } , X { Int } , .Patterns ) , \equals ( MIN_K1 { Int } , MIN { Int } ) , \equals ( MAX_L2 { Int } , MAX { Int } ) , \not ( isMember ( X { Int } , F_J1 { SetInt } , .Patterns ) ) , \not ( isMember ( X { Int } , F_J2 { SetInt } , .Patterns ) ) , \equals ( F { SetInt } , union ( singleton ( X { Int } , .Patterns ) , union ( F_J1 { SetInt } , F_J2 { SetInt } , .Patterns ) , .Patterns ) ) , disjoint ( F_J1 { SetInt } , F_J2 { SetInt } , .Patterns ) , .Patterns ) , .Patterns ) )
    </declaration> <declaration>
      axiom \forall { H { ArrayIntInt } , X { Int } , F { SetInt } , MIN { Int } , MAX { Int } , Height { Int } , Balance { Int } , .Patterns } \iff-lfp ( avl ( H { ArrayIntInt } , X { Int } , F { SetInt } , MIN { Int } , MAX { Int } , Height { Int } , Balance { Int } , .Patterns ) , \or ( \exists { .Patterns } \and ( \equals ( X { Int } , 0 ) , \equals ( F { SetInt } , emptyset ) , \equals ( Balance { Int } , 0 ) , \equals ( Height { Int } , 0 ) , .Patterns ) , \exists { .Patterns } \and ( gt ( X { Int } , 0 , .Patterns ) , \equals ( select ( H { ArrayIntInt } , plus ( X { Int } , 1 , .Patterns ) , .Patterns ) , 0 ) , \equals ( select ( H { ArrayIntInt } , plus ( X { Int } , 2 , .Patterns ) , .Patterns ) , 0 ) , \equals ( MIN { Int } , X { Int } ) , \equals ( MAX { Int } , X { Int } ) , \equals ( Balance { Int } , 0 ) , \equals ( Height { Int } , 1 ) , \equals ( F { SetInt } , singleton ( X { Int } , .Patterns ) ) , .Patterns ) , \exists { B_1 { Int } , F_1 { SetInt } , H_1 { Int } , MAX_1 { Int } , MIN_1 { Int } , X_1 { Int } , .Patterns } \and ( avl ( H { ArrayIntInt } , X_1 { Int } , F_1 { SetInt } , MIN_1 { Int } , MAX_1 { Int } , H_1 { Int } , B_1 { Int } , .Patterns ) , avl ( H { ArrayIntInt } , X_1 { Int } , F_1 { SetInt } , MIN_1 { Int } , MAX_1 { Int } , H_1 { Int } , B_1 { Int } , .Patterns ) , gt ( X { Int } , 0 , .Patterns ) , \equals ( Balance { Int } , minus ( H_1 { Int } , H_1 { Int } , .Patterns ) ) , gt ( Balance { Int } , -2 , .Patterns ) , gt ( 2 , Balance { Int } , .Patterns ) , \equals ( Height { Int } , plus ( max ( H_1 { Int } , H_1 { Int } , .Patterns ) , 1 , .Patterns ) ) , \equals ( select ( H { ArrayIntInt } , plus ( X { Int } , 1 , .Patterns ) , .Patterns ) , X_1 { Int } ) , \equals ( select ( H { ArrayIntInt } , plus ( X { Int } , 2 , .Patterns ) , .Patterns ) , X_1 { Int } ) , gt ( X { Int } , MAX_1 { Int } , .Patterns ) , gt ( MIN_1 { Int } , X { Int } , .Patterns ) , \equals ( MIN_1 { Int } , MIN { Int } ) , \equals ( MAX_1 { Int } , MAX { Int } ) , \not ( isMember ( X { Int } , F_1 { SetInt } , .Patterns ) ) , \not ( isMember ( X { Int } , F_1 { SetInt } , .Patterns ) ) , \equals ( F { SetInt } , union ( singleton ( X { Int } , .Patterns ) , union ( F_1 { SetInt } , F_1 { SetInt } , .Patterns ) , .Patterns ) ) , disjoint ( F_1 { SetInt } , F_1 { SetInt } , .Patterns ) , .Patterns ) , .Patterns ) )
    </declaration> <declaration>
      axiom functional ( avl )
    </declaration> <declaration>
      axiom functional ( bst )
    </declaration> <declaration>
      symbol avl ( ArrayIntInt , Int , SetInt , Int , Int , Int , Int , .Sorts ) : Bool
    </declaration> <declaration>
      symbol bst ( ArrayIntInt , Int , SetInt , Int , Int , .Sorts ) : Bool
    </declaration>
  </declarations>
</prover>
