symbol reachableInNSteps(ArrayIntInt, Int, ArrayIntInt, Int, ArrayIntInt, Int) : Bool
axiom functional(reachableInNSteps)

// addr_N = 2
// addr_S = 1
// pc_end = 12

axiom \forall { PGM { ArrayIntInt }, PC_INIT { Int }, HEAP_INIT { ArrayIntInt }
                                   , PC_FINAL { Int }, HEAP_FINAL { ArrayIntInt }
                                   , N { Int } }
      \iff-lfp( reachableInNSteps( PGM { ArrayIntInt }
                                 , PC_INIT { Int }, HEAP_INIT { ArrayIntInt }
                                 , PC_FINAL { Int }, HEAP_FINAL { ArrayIntInt }
                                 , N { Int }
                                 )
              , \or( \exists { M { Int }, HEAP_NEXT { ArrayIntInt } }
                     \and( gt(select(HEAP_INIT { ArrayIntInt }, 2), 0)
                         , \equals( HEAP_NEXT { ArrayIntInt }
                                  , store ( store ( HEAP_INIT { ArrayIntInt }
                                                  , 1
                                                  , plus( select(HEAP_INIT { ArrayIntInt }, 2)
                                                        , select(HEAP_INIT { ArrayIntInt }, 1)
                                                        )
                                                  )
                                          , 2
                                          , minus(select(HEAP_INIT { ArrayIntInt }, 2), 1)
                                          )
                                  )
                         , gt(N { Int }, 0)
                         , \equals(M { Int }, minus(N { Int }, 1))
                         , reachableInNSteps( PGM { ArrayIntInt }
                                            , PC_INIT { Int }, HEAP_NEXT { ArraryIntInt }
                                            , PC_FINAL { Int }, HEAP_FINAL { ArraryIntInt }
                                            , M { Int }
                                            )
                        )
                   , \exists { }
                     \and( \equals(select(HEAP_INIT { ArrayIntInt }, 2), 0)
                         , \equals(HEAP_INIT { ArrayIntInt }, HEAP_FINAL { ArrayIntInt })
                         , \equals(PC_FINAL { Int }, 12)
                         , \equals(N { Int }, 0)
                         )
                   )
              )

claim \implies ( \and ( \equals(N_INIT { Int }, select(H_INIT { ArrayIntInt }, 2))
                      , \equals(S_INIT { Int }, select(H_INIT { ArrayIntInt }, 1))

                      , \equals(PC_INIT { Int }, 0)
                      , \equals(PC_FINAL { Int }, 12)

                      , reachableInNSteps( PGM { ArrayIntInt }
                                         , PC_INIT { Int }
                                         , H_INIT { ArrayIntInt }
                                         , PC_FINAL { Int }
                                         , H_FINAL { ArrayIntInt }
                                         , STEPS { Int }
                                         )
                      )
               , \and ( \equals(S_FINAL { Int }, select(H_FINAL { ArrayIntInt }, 1))
                      , \equals(N_FINAL { Int }, select(H_FINAL { ArrayIntInt }, 2)) 
                      , \equals(REDEX { Int }, div( mult( N_INIT { Int }
                                                        , plus( N_INIT { Int }, 1)
                                                        )
                                                  , 2
                                                  )
                               )
                      , \equals(S_FINAL { Int }, plus(S_INIT { Int }, REDEX { Int }))
                      , \equals(N_FINAL { Int }, 0)
                      )
               )

strategy wait

// strategy left-unfold-Nth(0)
//        ; kt # head(reachableInNSteps) # useAffectedHeuristic
//          ; ( ( simplify ; direct-proof )
//            | simplify
//            )
