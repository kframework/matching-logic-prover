#!/usr/bin/env python3

import sys
import shutil
from os                 import (path, environ)
from lib.testlists      import *

repo_dir = path.dirname(__file__)
sys.path.append(path.join(repo_dir, 'ext/'))
from kninja import *
environ['PATH'] = path.join(repo_dir, 'ext/k-light/bin/') + ':' + environ['PATH']

# Project Definition
# ==================

proj = KProject()

# Matching Logic Prover
# =====================

other_md_files = [ 'lang/smt-lang.md'
                 , 'lang/kore-lang.md'
                 , 'drivers/base.md'
                 , 'drivers/smt-driver.md'
                 , 'drivers/kore-driver.md'
                 , 'strategies/core.md'
                 , 'strategies/knaster-tarski.md'
                 , 'strategies/matching.md'
                 , 'strategies/simplification.md'
                 , 'strategies/search-bound.md'
                 , 'strategies/smt.md'
                 , 'strategies/unfolding.md'
                 ]

def prover(alias, flags = None):
    return proj.definition( alias = alias
                          , backend = 'ocaml'
                          , main = 'prover.md'
                          , other = other_md_files
                          , runner_script = './prover'
                          , flags = flags
                          )

prover_kore = prover('prover-kore', '--main-module DRIVER-KORE --syntax-module DRIVER-KORE-SYNTAX')
prover_smt  = prover('prover-smt',  '--main-module DRIVER-SMT  --syntax-module DRIVER-SMT-SYNTAX' )

# Functional tests
# ----------------

# prover_kore.tests(inputs = glob('t/*.kore'), implicit_inputs = glob('t/definitions/*.kore'), flags = '-cCOMMANDLINE=.CommandLine')
# prover_smt .tests(inputs = glob('t/*.smt2'), flags = '-cCOMMANDLINE=.CommandLine')

def log_on_success(file, message):
    return proj.rule( 'log-to-success'
                    , description = '$out: $message'
                    , command = "echo '$message' >> '$log_file'"
                    ) \
               .variable('log_file', file) \
               .variable('message',  message) \
               .ext(file.replace('/', '.'))

def krun_with_timeout(timeout_flags):
    # TODO: This timeout functionality should become a part of the runner script
    # or KNinja
    timeout_cmd = 'gtimeout' if shutil.which("gtimeout") else 'timeout'
    return prover_smt.krun() \
                     .ext('timeout') \
                     .variable('env', timeout_cmd + ' ' + timeout_flags + ' opam config exec --') \

def config_for_test(test):
    for list_config in test_lists:
        prefix, ktbound, unfold_bound, timeout, list = list_config
        passing = True
        if test in list: return (prefix, ktbound, unfold_bound, timeout, passing)
    return ("unfold-mut-recs . ", 5, 12, '20m', False)
def strategy_for_test(test):
    (prefix, ktbound, unfold_bound, timeout, passing) = config_for_test(test)
    strategy = prefix + 'search-sl(kt-bound: %d, unfold-bound: %d)' % (ktbound, unfold_bound)
    return strategy
def timeout_for_test(test):
    (prefix, ktbound, unfold_bound, timeout, passing) = config_for_test(test)
    return timeout
def known_passing(test):
    (prefix, ktbound, unfold_bound, timeout, passing) = config_for_test(test)
    return passing

def make_test(rule, test):
    commandline = "'--default-strategy %s'" % strategy_for_test(test)
    return proj.source(test) \
               .then(rule.variable('flags', '-cCOMMANDLINE=%s' % commandline))

def sl_comp_test(test, log_file):
    global tests_with_timeout
    test_no_timeout   = make_test(prover_smt.krun(), test)
    test_with_timeout = make_test(krun_with_timeout(timeout_for_test(test)), test) \
                          .then(log_on_success(log_file, test))
    return (test_no_timeout, test_with_timeout)

known_passing_tests = []
remaining_tests     = []
for t in qf_shid_entl_unsat_tests:
    (test_no_timeout, test_with_timeout) = sl_comp_test(t, '.build/passed')
    if known_passing(t): known_passing_tests += [test_with_timeout]
    else:                remaining_tests     += [test_with_timeout]
proj.alias('known-passing',   known_passing_tests).default()
proj.alias('remaining-tests', remaining_tests)
print('known-passing:', len(known_passing_tests))

separation_logic_2 = [ '.build/t/SL-COMP18/bench/qf_shid_entl/dll-entails-dll-rev.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/dll-rev-entails-dll-mid.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/dll-rev-entails-dll.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/dll_append_tail_entails_dllnull_nil.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/dll_concat_dllrev.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/dll_entails_dllrev.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/dll_entails_lspre.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/dll_entails_lsrev.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/dll_nil_tl_entails_dllnull.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/dllrev_append_head_entails_dll.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/dllrev_entails_dll.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/eolseg_01.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/eolseg_05.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/eolseg_06.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/eolseg_07.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/eolseg_12.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/eolseg_15.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/ls_entail_ls_nonrec_16.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/ls_even_join_entails_ls.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/ls_even_join_ls_entails_ls.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/ls_lsrev_concat_entail_ls_2.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/ls_lsrev_concat_entail_lsrev_2.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/ls_nonrec_entail_ls_13.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/ls_nonrec_entail_ls_14.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/ls_odd_join_entails_ls.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsevenodd_14.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsevenodd_15.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsevenodd_ls2_09.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsevenodd_ls2_15.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsevenodd_ls2_16.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsleftright_07.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsleftright_10.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsleftright_11.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsleftright_12.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsleftright_13.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsleftright_19.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/lsleftright_20.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/nll-vc07.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/nll-vc09.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/node-dll-rev-dll-entails-dll.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/tseg_join_2_entail_tree.sb.smt2.prover-smt-krun'
                     , '.build/t/SL-COMP18/bench/qf_shid_entl/tseg_join_tree.sb.smt2.prover-smt-krun'
                     ]
proj.alias('separation-logic-2-tests', separation_logic_2)

fol_tests = [ 
            ]
proj.alias('fol-tests', separation_logic_2)

def secondary_tests(alias, file):
    list = read_list(file)
    tests = []
    for t in list:
        (test_no_timeout , test_with_timeout) = sl_comp_test(t, '.build/%s.passed' % alias)
        tests += [test_with_timeout]
    proj.alias(alias, tests)
secondary_tests('qf_shidlia_entl_unsat_tests', 't/test-lists/qf_shidlia_entl.unsat')
secondary_tests('qf_shlid_entl_unsat_tests',   't/test-lists/qf_shlid_entl.unsat')
secondary_tests('shid_entl_unsat_tests',       't/test-lists/shid_entl.unsat')

# Unit Tests
# ----------

# TODO: LLVM errors are miles better than OCaml (a pretty low bar).
# However, we're still waiting on mkstemp for the SMT test, and
# on parseKore for the rest of the implementation.

test_driver = proj.definition( alias = 'test-driver'
                             , backend = 'llvm'
                             , main = 'drivers/unit-tests.md'
                             , other = other_md_files + ['prover.md']
                             , runner_script = './prover'
                             , flags = '-ccopt -g' # -ccopt -O0'
                             )

unit_tests = []
unit_tests += [proj.source('t/unit/match-assoc')     .then(test_driver.krun())]
unit_tests += [proj.source('t/unit/match-assoc-comm').then(test_driver.krun())]
# unit_tests += [proj.source('t/unit/smt')  .then(test_driver.krun())]
proj.alias('unit-tests', unit_tests)

if __name__ == "__main__": proj.main()
