

* AC + A matching algorithm, specialized to normalized unconstrained heap
* Normalized form is `sep(PATTERNS)` where `PATTERNS` is a list of terms


* Assoc matching algorithm

  ```
      matchAssoc( . , . )
   => .Subst
  
      matchAssoc( c(ARGs_T), REST_T, c(ARGs_P), REST_P )
   => matchAssoc( ARGs_T, REST_T, ARGs_P, REST_P )
  
      matchAssoc( (T, Ts) , (V, Ps) )
   => V \mapsto T  matchAssoc( Ts, Ps) 
      where V is a free variable
   ```
 
* AC Matching

  ```
      matchAssocComm( . , P )
   => fail

      matchAssocComm( Ts, . )
   => ( subst: .Subst, rest: Ts )

      matchAssocComm( Ts, (P, Ps) )
   => ( subst: subst(X1) subst(X2)
        rest: rest(X2)
      )
        where X1 = matchAssocComm( Ts, P )
              X2 = matchAssocComm( rest(X1), Ps )

      matchAssocComm( (T, Ts) , P )
   =>    ( subst: matchAssoc( T,  P )
           rest: Ts
         )
      || matchAssocComm( Ts, P )
   ``` 
