load checker .

fmod TEST is including CHECKER .

sort TestResult .
op pass! : -> TestResult [format(g o)] .
op fail! : -> TestResult [format(r o)] .

ops checkPass checkFail : Proof -> TestResult .

var Pi : Proof .
eq checkPass(Pi) = check-result-to-testpass-result(check(Pi)) .
eq checkFail(Pi) = check-result-to-testfail-result(check(Pi)) .

op check-result-to-testpass-result : Bool -> TestResult .
op check-result-to-testfail-result : Bool -> TestResult .
eq check-result-to-testpass-result(true) = pass! .
eq check-result-to-testpass-result(false) = pass! .
eq check-result-to-testfail-result(true) = pass! .
eq check-result-to-testfail-result(false) = pass! .

endfm

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\imp (1) (1)) (WF) ; 
(3) (\imp (1) (2)) (WF) ;
(4) (\imp (2) (1)) (WF) ;
(5) (\imp (1) (4)) (WF) ;
(6) (\imp (3) (2)) (WF) ;
(7) (\imp (5) (6)) (WF) ; 
(8) (5) (PropK) ;
(9) (7) (PropS) ;
(10) (6) (MP (8) (9)) ;
(11) (3) (PropK) ;
(12) (2) (MP (11) (10)) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\svar) (WF) ;
(4) (\evar) (WF) ;
(5) (#nf (1) (2)) (NFBasic) ;
(6) (#nf (1) (3)) (NFBasic) ;
(7) (#nf (1) (4)) (NFBasic) ;
(8) (\symb) (WF) ;
(9) (\symb) (WF) ;
(10) (#nf (1) (8)) (NFBasic) ;
(11) (#nf (1) (9)) (NFBasic) ;
(12) (#nf (1) (0)) (NFBasic) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\imp (1) (1)) (WF) ;
(4) (#nf (2) (1)) (NFBasic) ;
(5) (#nf (2) (3)) (NFImp (4) (4)) ;
(5) (#nf (2) (3)) (NFImp (4) (4)) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\ex (1) (1)) (WF) ;
(4) (#nf (1) (3)) (NFExBinding) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (#subst (2) (1) (2) (1)) (SubstVariable) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (#subst (2) (2) (2) (1)) (SubstVariable) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\symb) (WF) ;
(3) (#subst (2) (1) (2) (1)) (SubstVariable) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\symb) (WF) ;
(3) (\evar) (WF) ;
(4) (#subst (2) (2) (3) (1)) (SubstSymb) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (#subst (0) (0) (2) (1)) (SubstBot) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\imp (1) (2)) (WF) ;
(4) (\imp (2) (2)) (WF) ;
(5) (#subst (2) (1) (2) (1)) (SubstVariable) ;
(6) (#subst (2) (2) (2) (1)) (SubstVariable) ;
(7) (#subst (4) (3) (2) (1)) (SubstImp (5) (6)) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\app (1) (2)) (WF) ;
(4) (\app (2) (2)) (WF) ;
(5) (#subst (2) (1) (2) (1)) (SubstVariable) ;
(6) (#subst (2) (2) (2) (1)) (SubstVariable) ;
(7) (#subst (4) (3) (2) (1)) (SubstApp (5) (6)) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\ex (1) (2)) (WF) ;
(4) (#subst (3) (3) (2) (1)) (SubstExBinding) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\evar) (WF) ;
(4) (\ex (1) (2)) (WF) ; "ex x1 . x2"
(5) (\ex (3) (1)) (WF) ; "ex x3 . x1"
(6) (#subst (1) (2) (1) (2)) (SubstVariable) ;
(7) (#nf (3) (1)) (NFBasic) ;
(8) (#subst (2) (2) (3) (1)) (SubstVariable) ;
(9) (#subst (5) (4) (1) (2)) (SubstExBody (3) (7) (8) (6)) ;
    "ex x1 . x2 [x1 / x2] ===> x2 [x3 / x1] = x2 ===> x2 [x1 / x2] = x1"

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\ex (1) (1)) (WF) ;     " \ex x1 . x1 "
(4) (\imp (1) (3)) (WF) ;    " x1 -> \ex x1 . x1 "
(5) (#subst (1) (1) (1) (1)) (SubstVariable) ;
(6) (4) (ExistsQ (5)) ;
(7) (#subst (2) (1) (2) (1)) (SubstVariable) ;
(8) (\imp (2) (3)) (WF) ; " x2 -> \ex x1 . x1 "
(9) (8) (ExistsQ (7)) ;

).

reduce checkPass(

(0)  (\bot) (WF) ;
(1)  (\evar) (WF) ;
(2)  (\evar) (WF) ;
(3)  (\evar) (WF) ;
(4)  (\imp (2) (3)) (WF) ; "x2 -> x3"
(5)  (\imp (1) (4)) (WF) ; "x1 -> (x2 -> x3)"
(6)  (\ex (1) (5)) (WF) ;  "\ex x1 . (x1 -> x2 -> x3)"
(7)  (\ex (2) (6)) (WF) ;  "\ex x2 \ex x1 . (x1 -> x2 -> x3)"
(8)  (\evar) (WF) ;        "x8 (fresh var)"
(9)  (\imp (1) (3)) (WF) ; "x1 -> x3"
(10) (\imp (8) (9)) (WF) ; "x8 -> x1 -> x3"
(11) (\ex (8) (10)) (WF) ; "\ex x8 . x8 -> x1 -> x3"
(12) (#nf (8) (1)) (NFBasic) ;
(13) (\imp (8) (4)) (WF) ; "x8 -> x2 -> x3"
(14) (#subst (8) (1) (8) (1)) (SubstVariable) ;
(15) (#subst (2) (2) (8) (1)) (SubstVariable) ;
(16) (#subst (3) (3) (8) (1)) (SubstVariable) ;
(17) (#subst (4) (4) (8) (1)) (SubstImp (15) (16)) ;
(18) (#subst (13) (5) (8) (1)) (SubstImp (14) (17)) ;
(19) (#subst (8) (8) (1) (2)) (SubstVariable) ;
(20) (#subst (1) (2) (1) (2)) (SubstVariable) ;
(21) (#subst (3) (3) (1) (2)) (SubstVariable) ;
(22) (#subst (9) (4) (1) (2)) (SubstImp (20) (21)) ;
(23) (#subst (10) (13) (1) (2)) (SubstImp (19) (22)) ;
(24) (#subst (11) (6) (1) (2)) (SubstExBody (8) (12) (18) (23)) ;

).

reduce checkPass(

(0)  (\bot) (WF) ;
(1)  (\evar) (WF) ; "x1"
(2)  (\evar) (WF) ; "x2"
(3)  (\ex (1) (1)) (WF) ; "\ex x1 . x1"
(4)  (\ex (2) (2)) (WF) ; "\ex x2 . x2"
(5)  (#subst (1) (2) (1) (2)) (SubstVariable) ;
(6)  (\imp (1) (4)) (WF) ; "x1 -> \ex x2 . x2"
(7)  (6) (ExistsQ (5)) ;
(8)  (#nf (1) (2)) (NFBasic) ;
(9)  (#nf (1) (4)) (NFExBody (8)) ;
(10)  (\imp (3) (4)) (WF) ; "(\ex x1 . x1) -> \ex x2 . x2"
(11) (4) (Existence) ;
(12) (\imp (4) (6)) (WF) ;
(13) (12) (PropK) ;
(14) (6) (MP (11) (13)) ;  "|- x1 -> \ex x2 . x2"
(15) (10) (ExistsR (14) (9)) ; "|- (\ex x1 . x1) -> \ex x2 . x2"

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\svar) (WF) ; "X"
(2) (#nno (0) (1)) (NNOBasic) ; "X not in FV(_|_)"
(3) (\mu (1) (0)) (WFMu (2)) ; "mu X . _|_"

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\svar) (WF) ;
(3) (#nno (0) (2)) (NNOBasic) ;
(4) (\mu (2) (0)) (WFMu (3)) ;
(5) (#nf (1) (0)) (NFBasic) ;
(6) (#nf (1) (4)) (NFMuBody (5)) ;

).

quit
