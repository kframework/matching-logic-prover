<prover>
  <k>
    .
  </k>
  <exit-code>
    0
  </exit-code>
  <goals>
    <goal>
      active: true, id: root, parent: .
      <claim>
        \implies ( \and ( listSortedLength ( H { ArrayIntInt } , X { Int } , K { SetInt } , MIN { Int } , Length { Int } , .Patterns ) , .Patterns ) , \exists { .Patterns } \and ( listSorted ( H { ArrayIntInt } , X { Int } , K { SetInt } , MIN { Int } , .Patterns ) , .Patterns ) )
      </claim>
      <strategy>
        success
      </strategy>
      <expected>
        success
      </expected>
    <trace>
      .
    </trace>
  </goals>
  <declarations>
    <declaration>
      axiom \forall { H { ArrayIntInt } , X { Int } , F { SetInt } , PREV_VAL { Int } , .Patterns } \iff-lfp ( listSorted ( H { ArrayIntInt } , X { Int } , F { SetInt } , PREV_VAL { Int } , .Patterns ) , \or ( \exists { .Patterns } \and ( \equals ( X { Int } , 0 ) , \equals ( F { SetInt } , emptyset ) , .Patterns ) , \exists { F_I { SetInt } , VAL_I { Int } , X_I { Int } , .Patterns } \and ( listSorted ( H { ArrayIntInt } , X_I { Int } , F_I { SetInt } , VAL_I { Int } , .Patterns ) , gt ( X { Int } , 0 , .Patterns ) , \equals ( select ( H { ArrayIntInt } , X { Int } , .Patterns ) , X_I { Int } ) , \equals ( F { SetInt } , union ( F_I { SetInt } , singleton ( X { Int } , .Patterns ) , .Patterns ) ) , disjoint ( F_I { SetInt } , singleton ( X { Int } , .Patterns ) , .Patterns ) , \equals ( VAL_I { Int } , select ( H { ArrayIntInt } , plus ( X { Int } , 1 , .Patterns ) , .Patterns ) ) , gt ( VAL_I { Int } , PREV_VAL { Int } , .Patterns ) , .Patterns ) , .Patterns ) )
    </declaration> <declaration>
      axiom \forall { H { ArrayIntInt } , X { Int } , F { SetInt } , PREV_VAL { Int } , LENGTH { Int } , .Patterns } \iff-lfp ( listSortedLength ( H { ArrayIntInt } , X { Int } , F { SetInt } , PREV_VAL { Int } , LENGTH { Int } , .Patterns ) , \or ( \exists { .Patterns } \and ( \equals ( X { Int } , 0 ) , \equals ( F { SetInt } , emptyset ) , \equals ( LENGTH { Int } , 0 ) , .Patterns ) , \exists { F_I { SetInt } , LENGTH_I { Int } , VAL_I { Int } , X_I { Int } , .Patterns } \and ( listSortedLength ( H { ArrayIntInt } , X_I { Int } , F_I { SetInt } , VAL_I { Int } , LENGTH_I { Int } , .Patterns ) , gt ( X { Int } , 0 , .Patterns ) , \equals ( select ( H { ArrayIntInt } , X { Int } , .Patterns ) , X_I { Int } ) , \equals ( F { SetInt } , union ( F_I { SetInt } , singleton ( X { Int } , .Patterns ) , .Patterns ) ) , disjoint ( F_I { SetInt } , singleton ( X { Int } , .Patterns ) , .Patterns ) , \equals ( VAL_I { Int } , select ( H { ArrayIntInt } , plus ( X { Int } , 1 , .Patterns ) , .Patterns ) ) , gt ( VAL_I { Int } , PREV_VAL { Int } , .Patterns ) , gt ( LENGTH { Int } , 0 , .Patterns ) , \equals ( LENGTH_I { Int } , minus ( LENGTH { Int } , 1 , .Patterns ) ) , .Patterns ) , .Patterns ) )
    </declaration> <declaration>
      axiom functional ( listSorted )
    </declaration> <declaration>
      axiom functional ( listSortedLength )
    </declaration> <declaration>
      symbol listSorted ( ArrayIntInt , Int , SetInt , Int , .Sorts ) : Bool
    </declaration> <declaration>
      symbol listSortedLength ( ArrayIntInt , Int , SetInt , Int , Int , .Sorts ) : Bool
    </declaration>
  </declarations>
</prover>
