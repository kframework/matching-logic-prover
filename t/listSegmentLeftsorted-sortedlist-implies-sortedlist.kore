imports "t/definitions/listSegmentLeftSorted.kore"
imports "t/definitions/listSorted.kore"

/* lseglsorted(H, X, Y, F, PV, MAX) ==
     (X = Y and F = empty and PV <= MAX) OR
     (exists X', F', V. (H[X] = X' and F' U {X} = F and F' disjoint {X}) and
                        H[X+1] = V and X > 0 and V > PV and V <= MAX and
                        lseglsorted(H, X', Y, F', V, MAX))
*/

/* listsorted(H, X, F, PV) ==
     (X = 0 and F = empty) OR
     (exists X', F', V. (H[X] = X' and F' U {X} = F and F' disjoint {X}) and
                        H[X+1] = V and X > 0 and V > PV and
                        listsorted(H, X', F', V))
*/

claim \implies( \and( listSegmentLeftSorted( H { ArrayIntInt } 
                                    , X { Int } 
                                    , Y { Int } 
                                    , F { SetInt }
                                    , MIN { Int }
                                    , MAX { Int } 
                                    )
                    , listSorted( H { ArrayIntInt }
                                , Y { Int }
                                , G { SetInt }
                                , MIN2 { Int }) 
                    , \equals( K { SetInt }, union(F { SetInt }, G { SetInt })) 
                    , disjoint(F { SetInt }, G { SetInt }) 
                    , \not(gt(MAX { Int }, MIN2 { Int }))
                     )
              , \and( listSorted( H { ArrayIntInt }
                                , X { Int }
                                , K { SetInt }
                                , MIN { Int }
                                )
                     )
              )

strategy kt . normalize
            . ( ( simplify
                . left-unfold-Nth(0) .
                  ( ( right-unfold-Nth(0, 0) . smt)
                  | ( right-unfold-Nth(0, 1) . smt)
                  )
                )
              )

// strategy search-bound(4)
