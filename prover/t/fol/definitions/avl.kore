symbol avl(ArrayIntInt, Int, SetInt, Int, Int, Int, Int) : Bool
axiom functional(avl)

axiom \forall { H { ArrayIntInt }, X { Int }, F { SetInt }, MIN { Int }, MAX { Int }, Height { Int }, Balance { Int  }}
      \iff-lfp( avl(H { ArrayIntInt }, X { Int }, F { SetInt } , MIN { Int }, MAX { Int }, Height { Int }, Balance { Int })
              , \or( \exists { }
                     \and( \equals(X { Int },0)
                         , \equals(F { SetInt } , emptyset)
                         , \equals(Balance { Int }, 0)
                         , \equals(Height { Int }, 0)
                         )
                   , \exists { }
                     \and( gt(X { Int },0)
                         , \equals(select(H { ArrayIntInt }, plus(X { Int }, 1)), 0)
                         , \equals(select(H { ArrayIntInt }, plus(X { Int }, 2)), 0)
                         , \equals(MIN { Int }, X { Int })
                         , \equals(MAX { Int }, X { Int })
                         , \equals(Balance { Int }, 0)
                         , \equals(Height { Int }, 1)
                         , \equals(F { SetInt } , singleton(X { Int }))
                         )
                   , \exists { B_1 { Int } , F_1 { SetInt } , H_1 { Int } , MAX_1 { Int } , MIN_1 { Int } , X_1 { Int } }
                     \and( avl( H { ArrayIntInt }
                              , X_1 { Int }
                              , F_1 { SetInt }
                              , MIN_1 { Int }
                              , MAX_1 { Int }
                              , H_1 { Int }
                              , B_1 { Int }
                              )
                         , avl( H { ArrayIntInt }
                              , X_1 { Int }
                              , F_1 { SetInt }
                              , MIN_1 { Int }
                              , MAX_1 { Int }
                              , H_1 { Int }
                              , B_1 { Int }
                              )
                         , gt(X { Int },0)
                         , \equals( Balance { Int }
                                  , minus( H_1 { Int }
                                         , H_1 { Int }
                                         )
                                  )
                         , gt(Balance { Int }, -2)
                         , gt(2, Balance { Int })
                         , \equals( Height { Int }
                                  , plus( max( H_1 { Int }
                                             , H_1 { Int }
                                             )
                                         , 1))
                         , \equals(select(H { ArrayIntInt }, plus(X { Int }, 1)), X_1 { Int })
                         , \equals(select(H { ArrayIntInt }, plus(X { Int }, 2)), X_1 { Int })
                         , gt(X { Int }, MAX_1 { Int })
                         , gt(MIN_1 { Int }, X { Int })
                         , \equals(MIN_1 { Int }, MIN { Int })
                         , \equals(MAX_1 { Int }, MAX { Int })
                         , \not(isMember(X { Int }, F_1 { SetInt }))
                         , \not(isMember(X { Int }, F_1 { SetInt }))
                         , \equals(F { SetInt } , union( singleton(X { Int })
                                           , union( F_1 { SetInt }
                                                  , F_1 { SetInt })))
                         , disjoint(F_1 { SetInt }, F_1 { SetInt })                        )                  )
              )


